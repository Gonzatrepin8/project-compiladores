1. Extender la siguiente gramatica de expresiones con declaracion de variables, asignaciones y uso de
variables. Considere que las variables pueden ser de tipo entero (int) o logico (bool). Ademas, extienda
la gramatica para permitir valores constantes logicos.

PROG -> lambda | PROG STMT

STMT -> EXPR ';' | DECL ';' | RETURN EXPR ';' | DEF_MAIN

DEF_MAIN -> TIPO MAIN '(' ')' '{' PROG '}'

DECL -> TIPO ID | ID '=' EXPR | TIPO ID '=' EXPR

EXPR ->     VALOR
           | ID
           | EXPR '+' EXPR
           | EXPR '*' EXPR
           | EXPR '-' EXPR
           | '(' EXPR ')'
           | EXPR "||" EXPR
           | EXPR "&&" EXPR
           | '!' EXPR

VALOR -> INT | BOOL

TIPO -> "bool" 
      | "int" 
      | "void"

BOOL -> "true" | "false"

INT -> "-"?[0-9]+

ID -> [a-zA-Z]([a-zA-Z0-9])*

2. De expresiones regulares que definan la estructura de las palabras reservadas, variables, los valores
constantes, operadores y delimitadores del lenguaje del punto anterior.

Expresiones regulares (regex) que definan los tokens léxicos del lenguaje (palabras 
reservadas, variables, constantes, operadores, delimitadores):

Palabras reservadas:
int
bool
void
return
main
true
false

Identificadores (variables):
[a-zA-Z][a-zA-Z0-9]*

Constantes:
      Enteros:
      -?[0-9]+
      Booleanos:
      true|false

Operadores:
      Aritméticos:
      \+|\*|-
      Asignación:
      =
